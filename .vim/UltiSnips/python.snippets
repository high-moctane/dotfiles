snippet unionfind "class Union-Find:"
class UnionFind:
    def __init__(self, n):
        self.par = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.par[x] == x:
            return x
        self.par[x] = self.find(self.par[x])
        return self.par[x]

    def unite(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y:
            return

        if self.rank[x] < self.rank[y]:
            self.par[x] = y
        else:
            self.par[y] = x
            if self.rank[x] == self.rank[y]:
                self.rank[x] += 1

    def same(self, x, y):
        return self.find(x) == self.find(y)

endsnippet

snippet segment "class SegmentTree:"
class SegmentTree:
    def __init__(self, A, func, id_elem):
        """
        func(x, y) = max(x, y) 的な
        id_elem は max だったらfloat("-inf") とか範囲外の値
        """
        self.func = func
        self.id_elem = id_elem
        self.n = len(A)
        self.data = [0] * (2 * self.n - 1)
        for i in range(self.n):
            self.data[self.n-1+i] = A[i]
        for i in range(self.n-2, -1, -1):
            self.data[i] = self.func(self.data[2*i+1], self.data[2*i+2])

    def update(self, idx, x):
        idx += self.n - 1
        self.data[idx] = x
        while idx:
            idx = (idx - 1) // 2
            self.data[idx] = self.func(self.data[idx*2+1], self.data[idx*2+2])

    def query(self, left, right):
        """半開区間"""
        if left >= right:
            return self.id_elem
        left += self.n - 1
        right += self.n - 2
        res = self.id_elem
        while right - left > 1:
            if left & 1 == 0:
                res = self.func(res, self.data[left])
            if right & 1 == 1:
                res = self.func(res, self.data[right])
                right -= 1
            left //= 2
            right = (right - 1) // 2
        if left == right:
            res = self.func(res, self.data[left])
        else:
            res = self.func(self.func(res, self.data[left]), self.data[right])
        return res

endsnippet
	
